---
title: "Homework 4 - Submission 1"
subtitle: "ECON 470"
author: "Baran Pasa"
execute:
  echo: false
format:
  pdf:
    output-file: "pasa-b-hwk5-1"
    output-exit: "pdf"
    code-fold: true
    highlight-style: github
    include-in-header:
      text: |
        \addtokomafont{disposition}{\rmfamily}

jupyter: python3

---

# Homework 5 
### [Link to Github]('https://github.com/BaranPasa2/homework5') 
```{python}
#| echo: false         
#| output: true      
#| warning: false     
#| message: false     
# Importing the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pyfixest as pf
from IPython.display import Markdown, display
import warnings
warnings.simplefilter('ignore')
insurance = pd.read_csv('/Users/baranpasa/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory/Junior Year/Junior Spring/ECON 470/ECON 470 Python /homework5/homework5/data/output/acs_insurance.txt', sep="\t")
medicaid = pd.read_csv("/Users/baranpasa/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory/Junior Year/Junior Spring/ECON 470/ECON 470 Python /homework5/homework5/data/output/acs_medicaid.txt", sep="\t")
medicaid_expansion = pd.read_csv("/Users/baranpasa/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Emory/Junior Year/Junior Spring/ECON 470/ECON 470 Python /homework5/homework5/data/output/medicaid_expansion.txt", sep="\t")

```

## Summarizing the Data:

#### 1.
```{python}
#| echo: false         
#| output: true      
#| warning: false     
#| message: false     
insur_per_year = insurance.copy()
insur_per_year = insur_per_year.groupby('year', as_index=False)['ins_direct'].sum()

insur_totals = insurance.copy()
insur_totals = insur_totals.groupby("year", as_index=False)[
    ["ins_employer", "ins_direct", "ins_medicare", "ins_medicaid", "uninsured"]
].sum()

# Calculate the yearly total population
insur_totals["yearly_total"] = (
    insur_totals["ins_employer"] +
    insur_totals["ins_direct"] +
    insur_totals["ins_medicare"] +
    insur_totals["ins_medicaid"] +
    insur_totals["uninsured"]
)
insur_per_year = pd.merge(
    insur_per_year,
    insur_totals[['year', 'yearly_total']],
    on="year",
    how='left'
    )

insur_per_year['ins_direct_percent'] = insur_per_year['ins_direct'] / insur_per_year['yearly_total']

plt.figure(figsize=(10, 6))
plt.plot(insur_per_year["year"], insur_per_year["ins_direct_percent"], marker='o', linewidth=2)

plt.title("Total Direct Insurance Coverage by Year")
plt.xlabel("Year")
plt.ylabel("Percent of US Adult Population with Direct Insurance")
plt.gca().yaxis.set_major_formatter(PercentFormatter(xmax=1))  # use 100 if your values are 0–100
plt.grid(True)
plt.tight_layout()
plt.show()
```

#### 2.
Following Medicaid expansion in 2014, there was a decline in the rate of direct purchase health insurance in many states. This drop may be partly attributed to the increased availability and generosity of Medicaid coverage, which provided a free or low-cost alternative to plans purchased on the individual market. 

Additionally, changes in federal policies, such as the reduction of outreach funding and the repeal of the individual mandate penalty in 2017, may have discouraged enrollment in marketplace plans. The shrinking pool of healthy individuals likely increased premiums, further destabilizing the direct purchase market.

#### 3.
```{python}
medicaid_per_year = medicaid.groupby('year', as_index=False)['ins_medicaid'].sum()
medicaid_per_year = pd.merge(
    medicaid_per_year,
    insur_totals[['year', 'yearly_total']],
    on="year",
    how='left'
    )

medicaid_per_year['medicaid_percent'] = medicaid_per_year['ins_medicaid'] / medicaid_per_year['yearly_total']

plt.figure(figsize=(10, 6))
plt.plot(medicaid_per_year["year"], medicaid_per_year["medicaid_percent"], marker='o', linewidth=2)

plt.title("Medicaid Insurance Coverage by Year")
plt.xlabel("Year")
plt.ylabel("Percent of US Adult Population with Medicaid")
plt.gca().yaxis.set_major_formatter(PercentFormatter(xmax=1))  # use 100 if your values are 0–100
plt.grid(True)
plt.tight_layout()
plt.show()
```

#### 4.
```{python}
# Point 4
df_ins = insurance
df_exp = medicaid_expansion

# Clean and prepare expansion data
df_exp["expand_year"] = pd.to_datetime(df_exp["date_adopted"], errors="coerce").dt.year
df_exp = df_exp[["State", "expand_year"]]

# Merge with insurance data
df_merged = pd.merge(df_ins, df_exp, on="State", how="left")
# Label whether a state was expanded that year or not
df_merged["expanded"] = df_merged.apply(
    lambda row: "Expansion" if pd.notna(row["expand_year"]) and row["year"] >= row["expand_year"]
    else "Non-Expansion",
    axis=1
)


# Group by year and expansion status, summing ins_direct
df_grouped = df_merged.groupby(["year", "expanded"])["uninsured"].sum().reset_index()
df_grouped = pd.merge(df_grouped, insur_totals[['year', 'yearly_total']], on="year", how='left')
df_grouped['uninsured_expand_per'] = df_grouped['uninsured'] / df_grouped['yearly_total']

# Pivot to get columns for plotting
df_pivot = df_grouped.pivot(index="year", columns="expanded", values="uninsured_expand_per")

# Plotting
plt.figure(figsize=(10, 6))
df_pivot.plot(marker='o', linewidth=2)
plt.title("Uninsured Population Relative to Medicaid Expansion")
plt.ylabel("Total Uninsured")
plt.xlabel("Year")
plt.gca().yaxis.set_major_formatter(PercentFormatter(xmax=1))  # use 100 if your values are 0–100
plt.axvline(x=2014, color='red', linestyle='--', linewidth=2, label='ACA Medicaid Expansion (2014)')
plt.grid(True)
plt.tight_layout()
plt.legend(title="Medicaid Expansion Status")
plt.show()
```

## Estimating ATEs

#### 5.
```{python}
# Load insurance and Medicaid expansion data
df_ins = insurance
df_expand = medicaid_expansion

# Convert expansion year from date
df_expand["expand_year"] = pd.to_datetime(df_expand["date_adopted"], errors="coerce").dt.year

# Merge datasets
df = pd.merge(df_ins, df_expand[["State", "expand_year"]], on="State", how="left")

# Label expansion status by 2015
df["expanded"] = df["expand_year"].apply(lambda x: "Expansion" if pd.notna(x) and x <= 2015 else "Non-Expansion")

# Filter to years 2012 and 2015
df_filtered = df[df["year"].isin([2012, 2015])].copy()
df_filtered["uninsured_rate"] = df_filtered["uninsured"] / df_filtered["adult_pop"]
dd_table = df_filtered.groupby(["year", "expanded"])["uninsured_rate"].mean().unstack()

dd_table = dd_table * 100
dd_table = dd_table.round(2)
dd_table.index = ["2012", "2015"]
print(dd_table)

```

#### 6. 
```{python}
insurance_df = insurance.copy()
medicaid_df = medicaid.copy()

# Merge data
df = pd.merge(insurance_df, medicaid_df[['State', 'year', 'expand', 'expand_year']], 
              on=['State', 'year'], how='left')

# Filter to only 2014 expanders and never-expanders
df['treat_group'] = df['expand_year'] == 2014
df['control_group'] = df['expand'] == False
df = df[df['treat_group'] | df['control_group']]

# Treatment indicator
df['treated'] = df['treat_group'].astype(int)
df['post'] = (df['year'] >= 2014).astype(int)
df['did'] = df['treated'] * df['post']
df['uninsured_rate'] = df['uninsured'] / df['adult_pop']

# Run DiD regression with fixed effects for state and year
model = smf.ols(
    formula='uninsured_rate ~ treated + post + did + C(State) + C(year)',
    data=df
).fit(cov_type='cluster', cov_kwds={'groups': df['State']})

model.summary()
print(model.summary())
```